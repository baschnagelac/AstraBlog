@model AstraBlog.Models.BlogPost
@using AstraBlog.Services.Interfaces
@using AstraBlog.Enums;
@inject IImageService _ImageService

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>BlogPost</h4>
<hr />
<main class="container mt-5">
    <form asp-action="Edit" enctype="multipart/form-data">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Created" />
        <input type="hidden" asp-for="ImageData" />
        <input type="hidden" asp-for="ImageType" />
        <input type="hidden" asp-for="Slug" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <div class="col-12 col-lg-4">
                <div class="form-group">
                    <label asp-for="ImageFile" class="control-label">Blog Post Image</label>
                    <img class="img-fluid border rounded-3 m-2" style="max-height: 250px;"
                         src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!, Model.ImageType!, (int)DefaultImage.BlogPostImage)" id="blogImage">
                    <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                           onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                </div>
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Abstract" class="control-label"></label>
                    <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                    <span asp-validation-for="Abstract" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CategoryId" class="control-label">Category</label>
                    <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryList"></select>
                </div>

            </div>
            <div class="col-12 col-lg-8">
                <div class="form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <textarea asp-for="Content" class="editor form-control"></textarea>
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group" id="tagContainer">
                    <label asp-for="Tags"></label>
                    <input class="form-control" type="text" id="tagInput" name="StringTags" value="@ViewBag.Tags" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="form-group d-flex justify-content-end mt-3">
            <div class="form-group form-check d-flex my-auto">
                <label class="form-check-label my-auto me-4">
                    <input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
                </label>
            </div>
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </form>
    <div class="mt-5">
        <a asp-action="Index">Back to List</a>
    </div>
</main>



@*
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/ckeditor5/build/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'), {
                licenseKey: '',
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(error => {
                console.error('Oops, something went wrong!');
                console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                console.warn('Build id: xx09iayzufkn-lkt434h3lx2z');
                console.error(error);
            });
    </script>

    <script>
        function addTag(el) {
            let input = document.getElementById("tagInput");

            if (el.classList.contains('disabledTag')) {
                input.focus();
                return;
            }

            let tagName = el.textContent + ', ';

            let currentTags = input.value.split(',');

            //remove partially entered tag
            currentTags.pop();
            //add full name of clicked tag
            currentTags.push(tagName);

            input.value = currentTags.reduce((inputString, currentString) => inputString + ', ' + currentString.trim());

            el.classList.add('disabledTag');

            input.focus();
        }

        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };

        $(document).ready(function () {
            //show the tag cloud when input is focused
            $('#tagInput').focus(function () {
                $('.tagcloud').show(400);
            });

            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            //search tag cloud
            $('#tagInput').keyup(function () {
                //clear all disabledTag classes
                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                });

                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                $('.tagcloud > a:not( :contains(' + searchString + ') )').hide();
                $('.tagcloud > a:contains(' + searchString + ')').show();

                inputTags.forEach(tag => {
                    if (tag.trim() == '') {
                        return;
                    }

                    let containingTag = $('.tagcloud > a:contains(' + tag.trim() + ')')

                    if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase()) {

                        containingTag.addClass('disabledTag');
                    }
                });

            });

        });
    </script>*@
}




































@*
<div class="post-single-wrapper axil-section-gap bg-color-white">
    <div class="container">
        <div class="row">
            <form asp-action="Edit" enctype="multipart/form-data">
                <div class="col-md-10">
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="Created" />
                    <input type="hidden" asp-for="ImageData" />
                    <input type="hidden" asp-for="ImageType" />
                    <input type="hidden" asp-for="Slug" />



                    <!-- Start Blog Details  -->
                    <div class="axil-post-details">
                        <h4 class="title">Add a new BlogPost</h4>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <p class="comment-notes">
                            <span id="email-notes">
                                Create a new blog using the following fields.
                            </span> Required items are marked <span class="required">*</span>
                        </p>
                        <div class="row row-cols-10">
                            <div class="col-lg-8 col-md-8 col-12">
                                <div class="form-group">
                                    <label asp-for="Category" class="control-label"></label>
                                    <br />
                                    <select class="w-100" asp-for="CategoryId" asp-items="ViewBag.CategoryList"></select>
                                    <span asp-validation-for="Category" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-8 col-md-8 col-12">
                                <div class="form-group">
                                    <label asp-for="Title" class="control-label"></label>
                                    <input asp-for="Title" class="form-control" />
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>

                                </div>
                                <div class="col-lg-8 col-md-8 col-12">
                                    <div class="form-group">
                                        <label asp-for="Abstract" class="control-label"></label>
                                        <textarea asp-for="Abstract" class="form-control"></textarea>
                                        <span asp-validation-for="Abstract" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="col-lg-6 col-md-6 col-12">
                                    <div class="form-group">
                                        <label asp-for="ImageFile" class="control-label"></label>
                                        <input type="file" asp-for="ImageFile" class="form-control w-100" accept=".png,.jpg,.jpeg,.gif,.svg"
                                               onchange="document.getElementById('imageData').src = window.URL.createObjectURL(this.files[0])" />
                                        <span asp-validation-for="ImageFile" class="text-danger"></span>
                                    </div>
                                    <div class="post-thumbnail">
                                        <img id="imageData" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!,Model.ImageType!,(int)DefaultImage.BlogPostImage)" alt="Post Images" />
                                    </div>
                                </div>
                                <div class="col-lg-8 col-md-8 col-12">
                                    <div class="form-group">
                                        <label asp-for="Content" class="control-label"></label>
                                        <textarea asp-for="Content" class="form-control editor"></textarea>
                                        <span asp-validation-for="Content" class="text-danger"></span>
                                    </div>
                                <div class="form-group" id="tagContainer">
                                    <label asp-for="Tags"></label>
                                    <input class="form-control" type="text" id="tagInput" name="StringTags" value="@ViewBag.Tags" autocomplete="off" />
                                </div>
                                </div>
                                <div class="col-lg-8 col-md-8 col-12">
                                    <div class="form-group">
                                        <input class="" type="checkbox" asp-for="IsPublished" />
                                        <label class="control-label" asp-for="IsPublished">Publish</label>
                                        <span asp-validation-for="IsPublished" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <div class="form-submit cerchio">
                                        <input name="submit" type="submit" id="submit" class="axil-button button-rounded" value="Submit">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="axil-post-details">
                        </div>
                    </div>
            </form>
        </div>
    </div>
</div>*@


@*<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Abstract" class="control-label"></label>
                <input asp-for="Abstract" class="form-control" />
                <span asp-validation-for="Abstract" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Content" class="control-label"></label>
                <input asp-for="Content" class="form-control" />
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Created" class="control-label"></label>
                <input asp-for="Created" class="form-control" />
                <span asp-validation-for="Created" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Updated" class="control-label"></label>
                <input asp-for="Updated" class="form-control" />
                <span asp-validation-for="Updated" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Slug" class="control-label"></label>
                <input asp-for="Slug" class="form-control" />
                <span asp-validation-for="Slug" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsDeleted" /> @Html.DisplayNameFor(model => model.IsDeleted)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsPublished" /> @Html.DisplayNameFor(model => model.IsPublished)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="ImageData" class="control-label"></label>
                <input asp-for="ImageData" class="form-control" />
                <span asp-validation-for="ImageData" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ImageType" class="control-label"></label>
                <input asp-for="ImageType" class="form-control" />
                <span asp-validation-for="ImageType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>*@

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script src="https://cdn.ckeditor.com/ckeditor5/35.0.1/super-build/ckeditor.js"></script>
<script>
    CKEDITOR.ClassicEditor.create(document.querySelector(".editor"), {
        toolbar: {
            items: [
                'findAndReplace', 'selectAll', '|',
                'heading', '|',
                'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                'bulletedList', 'numberedList', 'todoList', '|',
                'outdent', 'indent', '|',
                'undo', 'redo',
                '-',
                'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                'alignment', '|',
                'link', 'insertImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                'textPartLanguage', '|',
                'sourceEditing'
            ],
            shouldNotGroupWhenFull: true
        },
        list: {
            properties: {
                styles: true,
                startIndex: true,
                reversed: true
            }
        },
        heading: {
            options: [
                { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
            ]
        },
        fontFamily: {
            options: [
                'default',
                'Arial, Helvetica, sans-serif',
                'Courier New, Courier, monospace',
                'Georgia, serif',
                'Lucida Sans Unicode, Lucida Grande, sans-serif',
                'Tahoma, Geneva, sans-serif',
                'Times New Roman, Times, serif',
                'Trebuchet MS, Helvetica, sans-serif',
                'Verdana, Geneva, sans-serif'
            ],
            supportAllValues: true
        },
        fontSize: {
            options: [10, 12, 14, 'default', 18, 20, 22],
            supportAllValues: true
        },
        htmlSupport: {
            allow: [
                {
                    name: /.*/,
                    attributes: true,
                    classes: true,
                    styles: true
                }
            ]
        },
        htmlEmbed: {
            showPreviews: true
        },
        link: {
            decorators: {
                addTargetToExternalLinks: true,
                defaultProtocol: 'https://',
            }
        },
        removePlugins: [
            'CKBox',
            'CKFinder',
            //'EasyImage',
            'RealTimeCollaborativeComments',
            'RealTimeCollaborativeTrackChanges',
            'RealTimeCollaborativeRevisionHistory',
            'PresenceList',
            'Comments',
            'TrackChanges',
            'TrackChangesData',
            'RevisionHistory',
            'Pagination',
            'WProofreader',
            // Careful, with the Mathtype plugin CKEditor will not load when loading this sample
            // from a local file system (file://) - load this site via HTTP server if you enable MathType
            'MathType'
        ]
    });
</script>
@*<script>
    function addTag(el) {
        let input = document.getElementById("tagInput");

        if (el.classList.contains('disabledTag')) {
            input.focus();
            return;
        }

        let tagName = el.textContent + ', ';

        let currentTags = input.value.split(',');

        //remove partially entered tag
        currentTags.pop();
        //add full name of clicked tag
        currentTags.push(tagName);

        input.value = currentTags.reduce((inputString, currentString) => inputString + ', ' + currentString.trim());

        el.classList.add('disabledTag');

        input.focus();
    }

    // override the jQuery ":contains" selector to make it case insensitive
    jQuery.expr[':'].contains = function (a, i, m) {
        return $(a).text().toUpperCase()
            .indexOf(m[3].toUpperCase()) >= 0;
    };

    $(document).ready(function () {
        //show the tag cloud when input is focused
        $('#tagInput').focus(function () {
            $('.tagcloud').show(400);
        });

        $('form *:not("#tagInput")').focus(function () {
            if ($('.tagcloud').is(':visible')) {
                $('.tagcloud').hide(300);
            }
        });

        //search tag cloud
        $('#tagInput').keyup(function () {
            //clear all disabledTag classes
            $('.disabledTag').each(function () {
                $(this).removeClass('disabledTag');
            });

            let inputTags = $(this).val().split(',');
            let searchString = inputTags.pop().trim();

            $('.tagcloud > a:not( :contains(' + searchString + ') )').hide();
            $('.tagcloud > a:contains(' + searchString + ')').show();

            inputTags.forEach(tag => {
                if (tag.trim() == '') {
                    return;
                }

                let containingTag = $('.tagcloud > a:contains(' + tag.trim() + ')')

                if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase()) {

                    containingTag.addClass('disabledTag');
                }
            });

        });

    });
</script>*@
}
